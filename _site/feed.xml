<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-09-20T22:36:48+08:00</updated><id>http://localhost:4000/</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Julia: Data Wrangling using JuliaDB.jl and JuliaDBMeta.jl</title><link href="http://localhost:4000/data/analyses/wrangling/julia/programming/packages/2018/06/08/Julia-Introduction-to-Data-Wrangling.html" rel="alternate" type="text/html" title="Julia: Data Wrangling using JuliaDB.jl and JuliaDBMeta.jl" /><published>2018-06-08T12:00:00+08:00</published><updated>2018-06-08T12:00:00+08:00</updated><id>http://localhost:4000/data/analyses/wrangling/julia/programming/packages/2018/06/08/Julia-Introduction-to-Data-Wrangling</id><content type="html" xml:base="http://localhost:4000/data/analyses/wrangling/julia/programming/packages/2018/06/08/Julia-Introduction-to-Data-Wrangling.html">&lt;p&gt;I’m a heavy user of Python’s &lt;a href=&quot;https://pandas.pydata.org/&quot;&gt;pandas&lt;/a&gt; and R’s &lt;a href=&quot;https://cran.r-project.org/web/packages/dplyr/index.html&quot;&gt;dplyr&lt;/a&gt; both at work and when I was taking my master’s degree. Hands down, both of these tools are very good at handling the data. So what about Julia? It’s a fairly new programming language that’s been around for almost 6 years already with a very active community. If you have no idea, I encourage you to visit &lt;a href=&quot;http://julialang.org/&quot;&gt;Julialang.org&lt;/a&gt;. In summary, it’s a programming language that walks like a &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;, but runs like a &lt;a href=&quot;https://en.wikipedia.org/wiki/C_%28programming_language%29&quot;&gt;C&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For data wrangling, there are two packages that we can use, and these are &lt;a href=&quot;https://github.com/JuliaData/DataFrames.jl&quot;&gt;DataFrames.jl&lt;/a&gt; and &lt;a href=&quot;http://juliadb.org/latest/&quot;&gt;JuliaDB.jl&lt;/a&gt;. Let me reserve a separate post for &lt;a href=&quot;https://github.com/JuliaData/DataFrames.jl&quot;&gt;DataFrames.jl&lt;/a&gt;, and instead focus on &lt;a href=&quot;http://juliadb.org/latest/&quot;&gt;JuliaDB.jl&lt;/a&gt; and &lt;a href=&quot;https://piever.github.io/JuliaDBMeta.jl/latest/&quot;&gt;JuliaDBMeta.jl&lt;/a&gt; (an alternative for querying the data, like that of R’s &lt;a href=&quot;https://cran.r-project.org/web/packages/dplyr/index.html&quot;&gt;dplyr&lt;/a&gt;) packages.&lt;/p&gt;
&lt;h3 class=&quot;section&quot;&gt;Package Installation&lt;/h3&gt;
&lt;p&gt;By default, the libraries I mentioned above are not built-in in Julia, and hence we need to install it:
&lt;script src=&quot;https://gist.github.com/alstat/78138748ba87580653416a6181693caa.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 class=&quot;section&quot;&gt;Data: nycflights13&lt;/h3&gt;
&lt;p&gt;In order to compare Julia’s capability on data wrangling with that of R’s &lt;a href=&quot;https://cran.r-project.org/web/packages/dplyr/index.html&quot;&gt;dplyr&lt;/a&gt;, we’ll reproduce the example in this &lt;a href=&quot;https://cran.rstudio.com/web/packages/dplyr/vignettes/dplyr.html&quot;&gt;site&lt;/a&gt;. It uses all 336,776 flights that departed from New York City in 2013. I have a copy of it on github, and the following will download and load the data:
&lt;script src=&quot;https://gist.github.com/alstat/c0c2bc4e5355ac55ad83fc07fa8561c8.js&quot;&gt;&lt;/script&gt;
The rows of the data are not displayed as we execute &lt;code&gt;nycflights&lt;/code&gt; in line 7, that’s because we have a lot of columns, and by default &lt;a href=&quot;http://juliadb.org/latest/&quot;&gt;JuliaDB.jl&lt;/a&gt; will not print all these unless you have a big display (unfortunately, I’m using my 13 inch laptop screen, and that’s why). Hence, for the rest of the article, we’ll be using selected columns only:
&lt;script src=&quot;https://gist.github.com/alstat/2cde6bb6e7ede38ddcdba7d47fb1fed7.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 class=&quot;section&quot;&gt;Filter Rows&lt;/h3&gt;
&lt;p&gt;Filtering is a row-wise operation and is done using the &lt;code&gt;Base.filter&lt;/code&gt; function with extended method for &lt;code&gt;JuliaDB.IndexedTables&lt;/code&gt;.
Therefore, to filter the data for month equal to 1 (January) and day equal to 1 (first day of the month), is done as follows:
&lt;script src=&quot;https://gist.github.com/alstat/fe17e7133a3de644bfc853b624bb6af3.js&quot;&gt;&lt;/script&gt;
To see the output for line 2 using &lt;code&gt;Base.filter&lt;/code&gt;, simply remove the semicolon and you’ll have the same output as that of line 5 (using &lt;code&gt;JuliaDBMeta.@filter&lt;/code&gt;).&lt;/p&gt;

&lt;h3 class=&quot;section&quot;&gt;Arrange Rows&lt;/h3&gt;
&lt;p&gt;To arrange the rows of the columns, use &lt;code&gt;Base.sort&lt;/code&gt; function:
&lt;script src=&quot;https://gist.github.com/alstat/1211792bac2febc1d7c4ba058107e2d9.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 class=&quot;section&quot;&gt;Select Columns&lt;/h3&gt;
&lt;p&gt;We’ve seen above how to select the columns, but we can also use ranges of columns for selection.
&lt;script src=&quot;https://gist.github.com/alstat/785e35fe4535c84cc8f60dafa9b39e69.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 class=&quot;section&quot;&gt;Rename Column&lt;/h3&gt;
&lt;p&gt;To rename the column, use &lt;code&gt;JuliaDB.renamecol&lt;/code&gt; function:
&lt;script src=&quot;https://gist.github.com/alstat/048463d348450873dba81f3a96a473d1.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 class=&quot;section&quot;&gt;Add New Column&lt;/h3&gt;
&lt;p&gt;To add a new column, use &lt;code&gt;insertcol&lt;/code&gt;, &lt;code&gt;insertcolafter&lt;/code&gt; and &lt;code&gt;insertcolbefore&lt;/code&gt; of the &lt;a href=&quot;http://juliadb.org/latest/&quot;&gt;JuliaDB.jl&lt;/a&gt;.
&lt;script src=&quot;https://gist.github.com/alstat/a5a2df1fbdb3feaad408a2ca92244e30.js&quot;&gt;&lt;/script&gt;
or use the &lt;code&gt;@transform&lt;/code&gt; macro of the &lt;a href=&quot;https://piever.github.io/JuliaDBMeta.jl/latest/&quot;&gt;JuliaDBMeta.jl&lt;/a&gt;:
&lt;script src=&quot;https://gist.github.com/alstat/ee7f0ab8405473aa88c5f52193ede352.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 class=&quot;section&quot;&gt;Summarize Data&lt;/h3&gt;
&lt;p&gt;The data can be summarized using the &lt;code&gt;JuliaDB.summarize&lt;/code&gt; function
&lt;script src=&quot;https://gist.github.com/alstat/3891fec973a923dcc0f6cc451ead4859.js&quot;&gt;&lt;/script&gt;
&lt;code&gt;@with&lt;/code&gt; macro is an alternative from &lt;a href=&quot;https://piever.github.io/JuliaDBMeta.jl/latest/&quot;&gt;JuliaDBMeta.jl&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;section&quot;&gt;Grouped Operations&lt;/h3&gt;
&lt;p&gt;For grouped operations, we can use the &lt;code&gt;JuliaDB.groupby&lt;/code&gt; function or the &lt;code&gt;JuliaDBMeta.@groupby&lt;/code&gt;:
&lt;script src=&quot;https://gist.github.com/alstat/523976efd34a747f8fe6211b16ad6bf0.js&quot;&gt;&lt;/script&gt;
We’ll use the summarized data above and plot the flight delay in relation to the distance travelled. We’ll use the &lt;a href=&quot;http://gadflyjl.org/stable/&quot;&gt;Gadfly.jl&lt;/a&gt; package for plotting and &lt;a href=&quot;https://github.com/davidanthoff/IterableTables.jl&quot;&gt;IterableTables.jl&lt;/a&gt; for converting &lt;a href=&quot;http://juliadb.org/latest/&quot;&gt;JuliaDB.jl&lt;/a&gt;’s IndexedTable objects to DataFrames.DataFrame object, that’s because Gadfly.plot has no direct method for JuliaDB.IndexedTables.
&lt;script src=&quot;https://gist.github.com/alstat/c8485c39992d82c9129ccd2e5e2745c2.js&quot;&gt;&lt;/script&gt;
To plot, run the following:
&lt;script src=&quot;https://gist.github.com/alstat/2d6322571f78ec940af76c6011ed9f1f.js&quot;&gt;&lt;/script&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/estadistika/assets/master/imgs/2018-6-8-p2.svg?sanitize=true&quot; /&gt;
To find the number of planes and the number of flights that go to each possible destination, run:
&lt;script src=&quot;https://gist.github.com/alstat/6a78c1dc19914326c39a4c47eecb7b8e.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 class=&quot;section&quot;&gt;Piping Multiple Operations&lt;/h3&gt;
&lt;p&gt;For multiple operations, it is convenient to use piping and that is the reason why we have tools like &lt;a href=&quot;https://piever.github.io/JuliaDBMeta.jl/latest/&quot;&gt;JuliaDBMeta.jl&lt;/a&gt;. The following example using &lt;a href=&quot;https://cran.rstudio.com/web/packages/dplyr/vignettes/dplyr.html&quot;&gt;R’s dplyr&lt;/a&gt;:
&lt;script src=&quot;https://gist.github.com/alstat/1ef5992f368ebdb4be5e8b95678e6021.js&quot;&gt;&lt;/script&gt;
is equivalent to the following Julia code using &lt;a href=&quot;https://piever.github.io/JuliaDBMeta.jl/latest/&quot;&gt;JuliaDBMeta.jl&lt;/a&gt;:
&lt;script src=&quot;https://gist.github.com/alstat/a91f46846a8bc6ef0ac2992293734f90.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h3 class=&quot;section&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I’ve demonstrated how easy it is to use Julia for doing data wrangling, and I love it. In fact, there is a library that can query any table-like data structure in Julia, and is called &lt;a href=&quot;https://github.com/davidanthoff/Query.jl&quot;&gt;Query.jl&lt;/a&gt; (will definitely write a separate article for this in the future).&lt;/p&gt;

&lt;p&gt;For more on &lt;a href=&quot;http://juliadb.org/latest/&quot;&gt;JuliaDB.jl&lt;/a&gt;, watch the &lt;a href=&quot;https://www.youtube.com/watch?v=d5SzUh2_ono&quot;&gt;Youtube tutorial&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m a heavy user of Python’s pandas and R’s dplyr both at work and when I was taking my master’s degree. Hands down, both of these tools are very good at handling the data. So what about Julia? It’s a fairly new programming language that’s been around for almost 6 years already with a very active community. If you have no idea, I encourage you to visit Julialang.org. In summary, it’s a programming language that walks like a Python, but runs like a C.</summary></entry></feed>